---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/login":
    post:
      summary: User login
      tags:
      - Login
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
  "/authors":
    get:
      summary: Get all authors
      tags:
      - Author
      responses:
        '200':
          description: successful
  "/books":
    get:
      summary: List all books
      tags:
      - Book
      responses:
        '200':
          description: successful
  "/books/search":
    get:
      summary: Search book by author or title name
      tags:
      - Book
      parameters:
      - name: searchTerm
        in: query
        description: term to search by book title or author name
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/books/out-of-stock":
    get:
      summary: Get books that are out of stock
      tags:
      - Book
      responses:
        '200':
          description: successful
  "/books/{id}":
    parameters:
    - name: id
      in: path
      description: id of the book we want to get data for
      required: true
      schema:
        type: string
    get:
      summary: Get book by id
      tags:
      - Book
      responses:
        '200':
          description: successful
        '404':
          description: book not found
  "/loans":
    get:
      security:
      - jwt: []
      summary: Get all loans
      tags:
      - Loan
      responses:
        '200':
          description: successful
    post:
      security:
      - jwt: []
      summary: Create a new loan
      tags:
      - Loan
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                book_id:
                  type: string
                loan_duration:
                  type: integer
              required:
              - name
              - model
  "/loans/users/{user_id}":
    parameters:
    - name: user_id
      in: path
      description: User id for which we want to get loans
      required: true
      schema:
        type: string
    get:
      security:
      - jwt: []
      summary: Get all user loans
      tags:
      - Loan
      responses:
        '200':
          description: successful
        '404':
          description: User not found
  "/users":
    get:
      summary: Get all users
      tags:
      - User
      responses:
        '200':
          description: successful
  "/users/{id}":
    parameters:
    - name: id
      in: path
      description: id of the user we want to fetch
      required: true
      schema:
        type: string
    get:
      summary: Get user by id
      tags:
      - User
      responses:
        '200':
          description: successful
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: 127.0.0.1:3000/

components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
